import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import Navigation from "@/components/Navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { MapPin, Hotel, Navigation as NavigationIcon, Volume2, Star, Loader2, Box, Headphones } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { useLanguage, Monument } from "@/contexts/LanguageContext";

interface Recommendation {
Â  id: string;
Â  type: string;
Â  name: string;
Â  description: string | null;
Â  distance: string | null;
Â  rating: number | null;
Â  contact: string | null;
}

const MonumentDetails = () => {
Â  const { id } = useParams();
Â  const navigate = useNavigate();
Â  const { toast } = useToast();
Â  const { language, getMonumentText } = useLanguage();
Â Â 
Â  const [monument, setMonument] = useState<Monument | null>(null);
Â  const [recommendations, setRecommendations] = useState<Recommendation[]>([]);
Â  const [loading, setLoading] = useState(true);
Â  const [audioLoading, setAudioLoading] = useState<string | null>(null);
Â  // Removed audio state, as we use window.speechSynthesis API
Â 
Â  // Cleanup effect: stops any browser speech when the component unmounts
Â  useEffect(() => {
Â  Â  return () => {
Â  Â  Â  window.speechSynthesis.cancel();
Â  Â  };
Â  }, []);

Â  useEffect(() => {
Â  Â  const checkAuth = async () => {
Â  Â  Â  const { data: { session } } = await supabase.auth.getSession();
Â  Â  Â  if (!session) {
Â  Â  Â  Â  navigate("/login");
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  fetchMonumentDetails();
Â  Â  };

Â  Â  checkAuth();
Â  }, [id, navigate]);

Â  const fetchMonumentDetails = async () => {
Â  Â  try {
Â  Â  Â  const [monumentRes, recommendationsRes] = await Promise.all([
Â  Â  Â  Â  // Fetch all multilingual columns
Â  Â  Â  Â  supabase.from("monuments").select(`
Â  Â  Â  Â  Â  Â  id, name, description, historical_info, location, category, image_url, model_url,
Â  Â  Â  Â  Â  Â  description_english, description_hindi, description_telugu,
Â  Â  Â  Â  Â  Â  historical_info_english, historical_info_hindi, historical_info_telugu
Â  Â  Â  Â  `).eq("id", id).single(),
Â  Â  Â  Â  supabase.from("recommendations").select("*").eq("monument_id", id),
Â  Â  Â  ]);

Â  Â  Â  if (monumentRes.error) throw monumentRes.error;
Â  Â  Â  if (recommendationsRes.error) throw recommendationsRes.error;

Â  Â  Â  setMonument(monumentRes.data as Monument);
Â  Â  Â  setRecommendations(recommendationsRes.data || []);
Â  Â  } catch (error: any) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Error loading monument details",
Â  Â  Â  Â  description: error.message,
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  Â  navigate("/dashboard");Â // Navigate back if details fail to load
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  // ðŸš€ CORRECTED FUNCTION: Uses Web Speech API with JSON response
Â  const handleTextToSpeech = async () => {
Â  Â  if (!monument || !window.speechSynthesis) {
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Browser not supported",
Â  Â  Â  Â  description: "Web Speech API is required for audio guide.",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  Â  return;
Â  Â  }

Â  Â  const synth = window.speechSynthesis;
Â  Â  // Stop any currently playing audio before starting a new request
Â  Â  synth.cancel();

Â  Â  setAudioLoading(language);

Â  Â  try {
Â  Â  Â  // 1. Get the currently localized text for the guide
Â  Â  Â  const description = getMonumentText(monument, 'description');
Â  Â  Â  const historicalInfo = getMonumentText(monument, 'historical_info');
Â  Â  Â  const textContent = `${monument.name}. ${description}. ${historicalInfo}`;
Â  Â  Â Â 
Â  Â  Â  // 2. Invoke the Edge Function (Returns JSON with translatedText)
Â  Â  Â  const { data, error } = await supabase.functions.invoke('text-to-speech', {
Â  Â  Â  Â  body: {Â 
Â  Â  Â  Â  Â  Â  text: textContent,Â 
Â  Â  Â  Â  Â  Â  language: languageÂ 
Â  Â  Â  Â  }
Â  Â  Â  });

Â  Â  Â  if (error) throw error;
Â  Â  Â  if (!data || !data.translatedText) throw new Error("Translation text not received from server.");
Â  Â  Â Â 
Â  Â  Â  // 3. Use Web Speech API for playback
Â  Â  Â  const utterance = new SpeechSynthesisUtterance(data.translatedText);
Â  Â  Â  
Â  Â  Â  // Map language string to BCP 47 language tag for better voice selection
Â  Â  Â  switch (language) {
Â  Â  Â  Â  case 'hindi':
Â  Â  Â  Â  Â  utterance.lang = 'hi-IN';
Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  case 'telugu':
Â  Â  Â  Â  Â  utterance.lang = 'te-IN';
Â  Â  Â  Â  Â  break;
Â  Â  Â  Â  case 'english':
Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  utterance.lang = 'en-US';
Â  Â  Â  Â  Â  break;
Â  Â  Â  }

Â  Â  Â  // Reset loading state when speech finishes or errors
Â  Â  Â  utterance.onend = () => setAudioLoading(null);
Â  Â  Â  utterance.onerror = () => setAudioLoading(null);

Â  Â  Â  synth.speak(utterance);

Â  Â  Â  toast({
Â  Â  Â  Â  title: "Audio Guide Started",
Â  Â  Â  Â  description: `Playing in ${language.charAt(0).toUpperCase() + language.slice(1)} (Browser Voice)`,
Â  Â  Â  });

Â  Â  } catch (error: any) {
Â  Â  Â  console.error("Audio generation error:", error);
Â  Â  Â  toast({
Â  Â  Â  Â  title: "Audio Error",
Â  Â  Â  Â  description: error.message || "Failed to start audio guide.",
Â  Â  Â  Â  variant: "destructive",
Â  Â  Â  });
Â  Â  } finally {
Â  Â  Â  // Note: setAudioLoading is primarily handled by utterance.onend/onerror
Â  Â  Â  if (!window.speechSynthesis.speaking && audioLoading === language) {
            setAudioLoading(null);
        }
Â  Â  }
Â  };

Â  // --- Rest of the rendering code ---

Â  if (loading || !monument) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen bg-background">
Â  Â  Â  Â  <Navigation />
Â  Â  Â  Â  <div className="flex items-center justify-center h-[calc(100vh-4rem)]">
Â  Â  Â  Â  Â  <Loader2 className="w-8 h-8 animate-spin text-primary" />
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  const nearbyPlaces = recommendations.filter((r) => r.type === "nearby_place");
Â  const hotels = recommendations.filter((r) => r.type === "hotel");

Â  // Use the Context helper for localized content
Â  const description = getMonumentText(monument, 'description');
Â  const historicalInfo = getMonumentText(monument, 'historical_info');

Â  return (
Â  Â  <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5">
Â  Â  Â  <Navigation />
Â  Â  Â Â 
Â  Â  Â  <main className="container mx-auto px-4 py-8">
Â  Â  Â  Â  <div className="grid lg:grid-cols-3 gap-8">
Â  Â  Â  Â  Â  <div className="lg:col-span-2 space-y-6">
Â  Â  Â  Â  Â  Â  <Card className="overflow-hidden shadow-elegant">
Â  Â  Â  Â  Â  Â  Â  {monument.image_url && (
Â  Â  Â  Â  Â  Â  Â  Â  <div className="relative h-96">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={monument.image_url}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alt={monument.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-full object-cover"
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  {monument.category && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Badge className="absolute top-4 right-4 bg-primary text-primary-foreground shadow-soft">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {monument.category}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Badge>
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  <CardHeader>
Â  Â  Â  Â  Â  Â  Â  Â  <CardTitle className="text-3xl font-bold">{monument.name}</CardTitle>
Â  Â  Â  Â  Â  Â  Â  Â  <CardDescription className="flex items-center gap-2 text-base">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <MapPin className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  {monument.location}
Â  Â  Â  Â  Â  Â  Â  Â  </CardDescription>
Â  Â  Â  Â  Â  Â  Â  </CardHeader>

Â  Â  Â  Â  Â  Â  Â  <CardContent className="space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  {monument.model_url && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Box className="w-5 h-5" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  3D Model
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="rounded-lg overflow-hidden border shadow-sm">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <iframe
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={monument.model_url}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-[400px]"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  frameBorder="0"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  allow="autoplay; fullscreen; xr-spatial-tracking"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  allowFullScreen
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold mb-2">Description</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-muted-foreground">{description}</p>
Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  {historicalInfo && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold mb-2">Historical Information</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-muted-foreground">{historicalInfo}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-lg font-semibold mb-3">Audio Guide</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex flex-wrap gap-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* The audio button uses the currently selected language */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleTextToSpeech}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={audioLoading !== null}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="gap-2 bg-secondary hover:bg-secondary/90"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {audioLoading === language ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Loader2 className="w-4 h-4 animate-spin" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Headphones className="w-4 h-4" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Play Guide in {language.charAt(0).toUpperCase() + language.slice(1)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {window.speechSynthesis.speaking && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  variant="outline" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => window.speechSynthesis.pause()}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={window.speechSynthesis.paused}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Stop Audio
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Removed the redundant audioText display */}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </CardContent>
Â  Â  Â  Â  Â  Â  </Card>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Recommendations Sidebar (Unchanged) */}
Â  Â  Â  Â  Â  <div className="space-y-6">
Â  Â  Â  Â  Â  Â  <Card className="shadow-elegant">
Â  Â  Â  Â  Â  Â  Â  <CardHeader>
Â  Â  Â  Â  Â  Â  Â  Â  <CardTitle>Recommendations</CardTitle>
Â  Â  Â  Â  Â  Â  Â  Â  <CardDescription>Nearby attractions and hotels</CardDescription>
Â  Â  Â  Â  Â  Â  Â  </CardHeader>
Â  Â  Â  Â  Â  Â  Â  <CardContent>
Â  Â  Â  Â  Â  Â  Â  Â  <Tabs defaultValue="places" className="w-full">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TabsList className="w-full">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TabsTrigger value="places" className="flex-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <NavigationIcon className="w-4 h-4 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Places
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TabsTrigger>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <TabsTrigger value="hotels" className="flex-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Hotel className="w-4 h-4 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Hotels
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </TabsTrigger>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </TabsList>

Â  Â  Â  Â  Â  Â  Â  Â  Â  <TabsContent value="places" className="space-y-4 mt-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {nearbyPlaces.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground text-center py-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  No nearby places available
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  nearbyPlaces.map((place) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Card key={place.id} className="border-l-4 border-l-secondary">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardHeader className="pb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardTitle className="text-base">{place.name}</CardTitle>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {place.distance && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardDescription className="flex items-center gap-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <MapPin className="w-3 h-3" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {place.distance}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </CardDescription>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </CardHeader>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {place.description && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardContent className="pt-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {place.description}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {place.rating && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-1 mt-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Star className="w-4 h-4 fill-primary text-primary" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm font-medium">{place.rating}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </CardContent>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Card>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </TabsContent>

Â  Â  Â  Â  Â  Â  Â  Â  Â  <TabsContent value="hotels" className="space-y-4 mt-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hotels.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground text-center py-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  No hotels available
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  hotels.map((hotel) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Card key={hotel.id} className="border-l-4 border-l-primary">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardHeader className="pb-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardTitle className="text-base">{hotel.name}</CardTitle>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hotel.distance && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardDescription className="flex items-center gap-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <MapPin className="w-3 h-3" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hotel.distance}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </CardDescription>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </CardHeader>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <CardContent className="pt-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hotel.description && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hotel.description}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {hotel.rating && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Star className="w-4 h-4 fill-primary text-primary" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="text-sm font-medium">{hotel.rating}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </CardContent>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Card>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </TabsContent>
Â  Â  Â  Â  Â  Â  Â  Â  </Tabs>
Â  Â  Â  Â  Â  Â  Â  </CardContent>
Â  Â  Â  Â  Â  Â  </Card>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </main>
Â  Â  </div>
Â  );
};

export default MonumentDetails;
